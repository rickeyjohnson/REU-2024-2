// Generated by gencpp from file piksi_rtk_msgs/VelEcefCov.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_VELECEFCOV_H
#define PIKSI_RTK_MSGS_MESSAGE_VELECEFCOV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct VelEcefCov_
{
  typedef VelEcefCov_<ContainerAllocator> Type;

  VelEcefCov_()
    : tow(0)
    , x(0)
    , y(0)
    , z(0)
    , cov_x_x(0.0)
    , cov_x_y(0.0)
    , cov_x_z(0.0)
    , cov_y_y(0.0)
    , cov_y_z(0.0)
    , cov_z_z(0.0)
    , n_sats(0)
    , flags(0)  {
    }
  VelEcefCov_(const ContainerAllocator& _alloc)
    : tow(0)
    , x(0)
    , y(0)
    , z(0)
    , cov_x_x(0.0)
    , cov_x_y(0.0)
    , cov_x_z(0.0)
    , cov_y_y(0.0)
    , cov_y_z(0.0)
    , cov_z_z(0.0)
    , n_sats(0)
    , flags(0)  {
  (void)_alloc;
    }



   typedef uint32_t _tow_type;
  _tow_type tow;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _z_type;
  _z_type z;

   typedef float _cov_x_x_type;
  _cov_x_x_type cov_x_x;

   typedef float _cov_x_y_type;
  _cov_x_y_type cov_x_y;

   typedef float _cov_x_z_type;
  _cov_x_z_type cov_x_z;

   typedef float _cov_y_y_type;
  _cov_y_y_type cov_y_y;

   typedef float _cov_y_z_type;
  _cov_y_z_type cov_y_z;

   typedef float _cov_z_z_type;
  _cov_z_z_type cov_z_z;

   typedef uint8_t _n_sats_type;
  _n_sats_type n_sats;

   typedef uint8_t _flags_type;
  _flags_type flags;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VEL_MODE_INVALID)
  #undef VEL_MODE_INVALID
#endif
#if defined(_WIN32) && defined(VEL_MODE_MEAS_DOPPLER)
  #undef VEL_MODE_MEAS_DOPPLER
#endif
#if defined(_WIN32) && defined(VEL_MODE_DERIVED_DOPPLER)
  #undef VEL_MODE_DERIVED_DOPPLER
#endif
#if defined(_WIN32) && defined(VEL_MODE_DEAD_RECKONING)
  #undef VEL_MODE_DEAD_RECKONING
#endif

  enum {
    VEL_MODE_INVALID = 0u,
    VEL_MODE_MEAS_DOPPLER = 1u,
    VEL_MODE_DERIVED_DOPPLER = 2u,
    VEL_MODE_DEAD_RECKONING = 3u,
  };


  typedef boost::shared_ptr< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> const> ConstPtr;

}; // struct VelEcefCov_

typedef ::piksi_rtk_msgs::VelEcefCov_<std::allocator<void> > VelEcefCov;

typedef boost::shared_ptr< ::piksi_rtk_msgs::VelEcefCov > VelEcefCovPtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::VelEcefCov const> VelEcefCovConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator2> & rhs)
{
  return lhs.tow == rhs.tow &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.cov_x_x == rhs.cov_x_x &&
    lhs.cov_x_y == rhs.cov_x_y &&
    lhs.cov_x_z == rhs.cov_x_z &&
    lhs.cov_y_y == rhs.cov_y_y &&
    lhs.cov_y_z == rhs.cov_y_z &&
    lhs.cov_z_z == rhs.cov_z_z &&
    lhs.n_sats == rhs.n_sats &&
    lhs.flags == rhs.flags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b1a393d40744915fd3904d558c780af";
  }

  static const char* value(const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b1a393d40744915ULL;
  static const uint64_t static_value2 = 0xfd3904d558c780afULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/VelEcefCov";
  }

  static const char* value(const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message reports the velocity in local North East Down (NED) coordinates.\n"
"# The NED coordinate system is defined as the local WGS84 tangent plane centered\n"
"# at the current position. The full GPS time is given by the preceding MSG GPS\n"
"# TIME with the matching time-of-week (tow). This message is similar to the MSG\n"
"# VEL NED, but it includes the upper triangular portion of the 3x3 covariance\n"
"# matrix.\n"
"\n"
"uint32 tow          # GPS Time of Week.\n"
"int32 x             # Velocity North coordinate [mm/s].\n"
"int32 y             # Velocity East coordinate [mm/s].\n"
"int32 z             # Velocity Down coordinate [mm/s].\n"
"float32 cov_x_x     # Estimated variance of x [m^2/s^2].\n"
"float32 cov_x_y     # Estimated covariance of x and y [m^2/s^2].\n"
"float32 cov_x_z     # Estimated covariance of x and z [m^2/s^2].\n"
"float32 cov_y_y     # Estimated variance of y [m^2/s^2].\n"
"float32 cov_y_z     # Estimated covariance of y and z [m^2/s^2].\n"
"float32 cov_z_z     # Estimated variance of z [m^2/s^2].\n"
"uint8 n_sats        # Number of satellites used in solution.\n"
"uint8 flags         # Status flags\n"
"\n"
"uint8 VEL_MODE_INVALID = 0\n"
"uint8 VEL_MODE_MEAS_DOPPLER = 1\n"
"uint8 VEL_MODE_DERIVED_DOPPLER = 2\n"
"uint8 VEL_MODE_DEAD_RECKONING = 3\n"
;
  }

  static const char* value(const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tow);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.cov_x_x);
      stream.next(m.cov_x_y);
      stream.next(m.cov_x_z);
      stream.next(m.cov_y_y);
      stream.next(m.cov_y_z);
      stream.next(m.cov_z_z);
      stream.next(m.n_sats);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelEcefCov_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::VelEcefCov_<ContainerAllocator>& v)
  {
    s << indent << "tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z);
    s << indent << "cov_x_x: ";
    Printer<float>::stream(s, indent + "  ", v.cov_x_x);
    s << indent << "cov_x_y: ";
    Printer<float>::stream(s, indent + "  ", v.cov_x_y);
    s << indent << "cov_x_z: ";
    Printer<float>::stream(s, indent + "  ", v.cov_x_z);
    s << indent << "cov_y_y: ";
    Printer<float>::stream(s, indent + "  ", v.cov_y_y);
    s << indent << "cov_y_z: ";
    Printer<float>::stream(s, indent + "  ", v.cov_y_z);
    s << indent << "cov_z_z: ";
    Printer<float>::stream(s, indent + "  ", v.cov_z_z);
    s << indent << "n_sats: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_sats);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_VELECEFCOV_H
