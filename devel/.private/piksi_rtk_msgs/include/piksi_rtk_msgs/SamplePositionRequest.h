// Generated by gencpp from file piksi_rtk_msgs/SamplePositionRequest.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_SAMPLEPOSITIONREQUEST_H
#define PIKSI_RTK_MSGS_MESSAGE_SAMPLEPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct SamplePositionRequest_
{
  typedef SamplePositionRequest_<ContainerAllocator> Type;

  SamplePositionRequest_()
    : num_desired_fixes(0)
    , file()
    , set_enu(false)
    , offset_z(0.0)  {
    }
  SamplePositionRequest_(const ContainerAllocator& _alloc)
    : num_desired_fixes(0)
    , file(_alloc)
    , set_enu(false)
    , offset_z(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _num_desired_fixes_type;
  _num_desired_fixes_type num_desired_fixes;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _file_type;
  _file_type file;

   typedef uint8_t _set_enu_type;
  _set_enu_type set_enu;

   typedef double _offset_z_type;
  _offset_z_type offset_z;





  typedef boost::shared_ptr< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SamplePositionRequest_

typedef ::piksi_rtk_msgs::SamplePositionRequest_<std::allocator<void> > SamplePositionRequest;

typedef boost::shared_ptr< ::piksi_rtk_msgs::SamplePositionRequest > SamplePositionRequestPtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::SamplePositionRequest const> SamplePositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.num_desired_fixes == rhs.num_desired_fixes &&
    lhs.file == rhs.file &&
    lhs.set_enu == rhs.set_enu &&
    lhs.offset_z == rhs.offset_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d61ca547d7fe6fd48751a949f576f865";
  }

  static const char* value(const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd61ca547d7fe6fd4ULL;
  static const uint64_t static_value2 = 0x8751a949f576f865ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/SamplePositionRequest";
  }

  static const char* value(const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 num_desired_fixes\n"
"string file\n"
"bool set_enu\n"
"float64 offset_z # Height of survey pole that will be subtracted from survey.\n"
;
  }

  static const char* value(const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_desired_fixes);
      stream.next(m.file);
      stream.next(m.set_enu);
      stream.next(m.offset_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SamplePositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::SamplePositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "num_desired_fixes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_desired_fixes);
    s << indent << "file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.file);
    s << indent << "set_enu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_enu);
    s << indent << "offset_z: ";
    Printer<double>::stream(s, indent + "  ", v.offset_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_SAMPLEPOSITIONREQUEST_H
