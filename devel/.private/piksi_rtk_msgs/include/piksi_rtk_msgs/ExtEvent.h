// Generated by gencpp from file piksi_rtk_msgs/ExtEvent.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_EXTEVENT_H
#define PIKSI_RTK_MSGS_MESSAGE_EXTEVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Time.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct ExtEvent_
{
  typedef ExtEvent_<ContainerAllocator> Type;

  ExtEvent_()
    : stamp()
    , pin_value(false)
    , quality(false)
    , pin(0)  {
    }
  ExtEvent_(const ContainerAllocator& _alloc)
    : stamp(_alloc)
    , pin_value(false)
    , quality(false)
    , pin(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Time_<ContainerAllocator>  _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _pin_value_type;
  _pin_value_type pin_value;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint8_t _pin_type;
  _pin_type pin;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PIN_VALUE_LOW)
  #undef PIN_VALUE_LOW
#endif
#if defined(_WIN32) && defined(PIN_VALUE_HIGH)
  #undef PIN_VALUE_HIGH
#endif
#if defined(_WIN32) && defined(QUALITY_UNKNOWN)
  #undef QUALITY_UNKNOWN
#endif
#if defined(_WIN32) && defined(QUALITY_GOOD)
  #undef QUALITY_GOOD
#endif

  enum {
    PIN_VALUE_LOW = 0u,
    PIN_VALUE_HIGH = 1u,
    QUALITY_UNKNOWN = 0u,
    QUALITY_GOOD = 1u,
  };


  typedef boost::shared_ptr< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ExtEvent_

typedef ::piksi_rtk_msgs::ExtEvent_<std::allocator<void> > ExtEvent;

typedef boost::shared_ptr< ::piksi_rtk_msgs::ExtEvent > ExtEventPtr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::ExtEvent const> ExtEventConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.pin_value == rhs.pin_value &&
    lhs.quality == rhs.quality &&
    lhs.pin == rhs.pin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e621795083c9af53b654fd825b99ec0";
  }

  static const char* value(const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e621795083c9af5ULL;
  static const uint64_t static_value2 = 0x3b654fd825b99ec0ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/ExtEvent";
  }

  static const char* value(const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reports detection of an external event, the GPS time it occurred, which pin it\n"
"# was and whether it was rising or falling.\n"
"\n"
"# Modified to contain ROS time.\n"
"\n"
"std_msgs/Time stamp\n"
"bool pin_value\n"
"bool quality\n"
"uint8 pin\n"
"\n"
"uint8 PIN_VALUE_LOW   = 0   # Falling edge.\n"
"uint8 PIN_VALUE_HIGH  = 1   # Rising edge\n"
"uint8 QUALITY_UNKNOWN = 0   # No NAV solution.\n"
"uint8 QUALITY_GOOD    = 1   # 1 Microsecond accuracy.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Time\n"
"time data\n"
;
  }

  static const char* value(const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.pin_value);
      stream.next(m.quality);
      stream.next(m.pin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::ExtEvent_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
    s << indent << "pin_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pin_value);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "pin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_EXTEVENT_H
