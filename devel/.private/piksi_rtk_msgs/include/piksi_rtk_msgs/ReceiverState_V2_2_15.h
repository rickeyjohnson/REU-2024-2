// Generated by gencpp from file piksi_rtk_msgs/ReceiverState_V2_2_15.msg
// DO NOT EDIT!


#ifndef PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_V2_2_15_H
#define PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_V2_2_15_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piksi_rtk_msgs
{
template <class ContainerAllocator>
struct ReceiverState_V2_2_15_
{
  typedef ReceiverState_V2_2_15_<ContainerAllocator> Type;

  ReceiverState_V2_2_15_()
    : header()
    , num_sat(0)
    , rtk_mode_fix(false)
    , sat()
    , cn0()
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , external_antenna_present(0)
    , num_gps_sat(0)
    , cn0_gps()
    , num_sbas_sat(0)
    , cn0_sbas()
    , num_glonass_sat(0)
    , cn0_glonass()
    , fix_mode()  {
    }
  ReceiverState_V2_2_15_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_sat(0)
    , rtk_mode_fix(false)
    , sat(_alloc)
    , cn0(_alloc)
    , system_error(0)
    , io_error(0)
    , swift_nap_error(0)
    , external_antenna_present(0)
    , num_gps_sat(0)
    , cn0_gps(_alloc)
    , num_sbas_sat(0)
    , cn0_sbas(_alloc)
    , num_glonass_sat(0)
    , cn0_glonass(_alloc)
    , fix_mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_sat_type;
  _num_sat_type num_sat;

   typedef uint8_t _rtk_mode_fix_type;
  _rtk_mode_fix_type rtk_mode_fix;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _sat_type;
  _sat_type sat;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cn0_type;
  _cn0_type cn0;

   typedef uint8_t _system_error_type;
  _system_error_type system_error;

   typedef uint8_t _io_error_type;
  _io_error_type io_error;

   typedef uint8_t _swift_nap_error_type;
  _swift_nap_error_type swift_nap_error;

   typedef uint8_t _external_antenna_present_type;
  _external_antenna_present_type external_antenna_present;

   typedef uint8_t _num_gps_sat_type;
  _num_gps_sat_type num_gps_sat;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cn0_gps_type;
  _cn0_gps_type cn0_gps;

   typedef uint8_t _num_sbas_sat_type;
  _num_sbas_sat_type num_sbas_sat;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cn0_sbas_type;
  _cn0_sbas_type cn0_sbas;

   typedef uint8_t _num_glonass_sat_type;
  _num_glonass_sat_type num_glonass_sat;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cn0_glonass_type;
  _cn0_glonass_type cn0_glonass;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fix_mode_type;
  _fix_mode_type fix_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CODE_GPS_L1CA)
  #undef CODE_GPS_L1CA
#endif
#if defined(_WIN32) && defined(CODE_GPS_L2CM)
  #undef CODE_GPS_L2CM
#endif
#if defined(_WIN32) && defined(CODE_SBAS_L1CA)
  #undef CODE_SBAS_L1CA
#endif
#if defined(_WIN32) && defined(CODE_GLO_L1CA)
  #undef CODE_GLO_L1CA
#endif
#if defined(_WIN32) && defined(CODE_GLO_L2CA)
  #undef CODE_GLO_L2CA
#endif
#if defined(_WIN32) && defined(CODE_GPS_L1P)
  #undef CODE_GPS_L1P
#endif
#if defined(_WIN32) && defined(CODE_GPS_L2P)
  #undef CODE_GPS_L2P
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_INVALID)
  #undef STR_FIX_MODE_INVALID
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_SPP)
  #undef STR_FIX_MODE_SPP
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_DGNSS)
  #undef STR_FIX_MODE_DGNSS
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_FLOAT_RTK)
  #undef STR_FIX_MODE_FLOAT_RTK
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_FIXED_RTK)
  #undef STR_FIX_MODE_FIXED_RTK
#endif
#if defined(_WIN32) && defined(STR_FIX_MODE_UNKNOWN)
  #undef STR_FIX_MODE_UNKNOWN
#endif

  enum {
    CODE_GPS_L1CA = 0u,
    CODE_GPS_L2CM = 1u,
    CODE_SBAS_L1CA = 2u,
    CODE_GLO_L1CA = 3u,
    CODE_GLO_L2CA = 4u,
    CODE_GPS_L1P = 5u,
    CODE_GPS_L2P = 6u,
  };

  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_INVALID;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_SPP;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_DGNSS;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_FLOAT_RTK;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_FIXED_RTK;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> STR_FIX_MODE_UNKNOWN;

  typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> const> ConstPtr;

}; // struct ReceiverState_V2_2_15_

typedef ::piksi_rtk_msgs::ReceiverState_V2_2_15_<std::allocator<void> > ReceiverState_V2_2_15;

typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_V2_2_15 > ReceiverState_V2_2_15Ptr;
typedef boost::shared_ptr< ::piksi_rtk_msgs::ReceiverState_V2_2_15 const> ReceiverState_V2_2_15ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_INVALID =
        
          "Invalid"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_SPP =
        
          "SPP"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_DGNSS =
        
          "DGNSS"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_FLOAT_RTK =
        
          "FLOAT_RTK"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_FIXED_RTK =
        
          "FIXED_RTK"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ReceiverState_V2_2_15_<ContainerAllocator>::STR_FIX_MODE_UNKNOWN =
        
          "Unknown"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_sat == rhs.num_sat &&
    lhs.rtk_mode_fix == rhs.rtk_mode_fix &&
    lhs.sat == rhs.sat &&
    lhs.cn0 == rhs.cn0 &&
    lhs.system_error == rhs.system_error &&
    lhs.io_error == rhs.io_error &&
    lhs.swift_nap_error == rhs.swift_nap_error &&
    lhs.external_antenna_present == rhs.external_antenna_present &&
    lhs.num_gps_sat == rhs.num_gps_sat &&
    lhs.cn0_gps == rhs.cn0_gps &&
    lhs.num_sbas_sat == rhs.num_sbas_sat &&
    lhs.cn0_sbas == rhs.cn0_sbas &&
    lhs.num_glonass_sat == rhs.num_glonass_sat &&
    lhs.cn0_glonass == rhs.cn0_glonass &&
    lhs.fix_mode == rhs.fix_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator1> & lhs, const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piksi_rtk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b24eec3eea4c8a5bf60087436d79950";
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b24eec3eea4c8a5ULL;
  static const uint64_t static_value2 = 0xbf60087436d79950ULL;
};

template<class ContainerAllocator>
struct DataType< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piksi_rtk_msgs/ReceiverState_V2_2_15";
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Miscellaneous information form different SBP messages\n"
"\n"
"# Message definition based on libsbp v2.2.15\n"
"\n"
"\n"
"Header header\n"
"\n"
"uint8 num_sat                   # Number of satellites.\n"
"bool rtk_mode_fix 	            # 1 = Fixed, 0 = Float.\n"
"uint8[] sat                     # Constellation-specific satellite identifier.\n"
"uint8[] cn0                     # Carrier-to-Noise density. Zero implies invalid cn0 [dB Hz / 4].\n"
"uint8 system_error              # System Error Flag.\n"
"uint8 io_error                  # IO Error Flag.\n"
"uint8 swift_nap_error           # SwiftNAP Error Flag.\n"
"uint8 external_antenna_present  # External Antenna Present Flag.\n"
"uint8 num_gps_sat               # Number of GPS satellites.\n"
"uint8[] cn0_gps                 # Carrier-to-Noise density of GPS satellites. Zero implies invalid cn0 [dB Hz / 4].\n"
"uint8 num_sbas_sat              # Number of SBAS satellites.\n"
"uint8[] cn0_sbas                # Carrier-to-Noise density of SBAS satellites. Zero implies invalid cn0 [dB Hz / 4].\n"
"uint8 num_glonass_sat           # Number of GLONASS satellites.\n"
"uint8[] cn0_glonass             # Carrier-to-Noise density of GLONASS satellites. Zero implies invalid cn0 [dB Hz / 4].\n"
"string fix_mode                 # Invalid, Single Point Position (SPP), Differential GNSS (DGNSS), Float RTK, Fixed RTK.\n"
"\n"
"\n"
"uint8 CODE_GPS_L1CA     = 0\n"
"uint8 CODE_GPS_L2CM     = 1\n"
"uint8 CODE_SBAS_L1CA    = 2\n"
"uint8 CODE_GLO_L1CA     = 3\n"
"uint8 CODE_GLO_L2CA     = 4\n"
"uint8 CODE_GPS_L1P      = 5\n"
"uint8 CODE_GPS_L2P      = 6\n"
"\n"
"string STR_FIX_MODE_INVALID   = Invalid\n"
"string STR_FIX_MODE_SPP       = SPP\n"
"string STR_FIX_MODE_DGNSS     = DGNSS\n"
"string STR_FIX_MODE_FLOAT_RTK = FLOAT_RTK\n"
"string STR_FIX_MODE_FIXED_RTK = FIXED_RTK\n"
"string STR_FIX_MODE_UNKNOWN   = Unknown\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_sat);
      stream.next(m.rtk_mode_fix);
      stream.next(m.sat);
      stream.next(m.cn0);
      stream.next(m.system_error);
      stream.next(m.io_error);
      stream.next(m.swift_nap_error);
      stream.next(m.external_antenna_present);
      stream.next(m.num_gps_sat);
      stream.next(m.cn0_gps);
      stream.next(m.num_sbas_sat);
      stream.next(m.cn0_sbas);
      stream.next(m.num_glonass_sat);
      stream.next(m.cn0_glonass);
      stream.next(m.fix_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReceiverState_V2_2_15_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piksi_rtk_msgs::ReceiverState_V2_2_15_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sat);
    s << indent << "rtk_mode_fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtk_mode_fix);
    s << indent << "sat[]" << std::endl;
    for (size_t i = 0; i < v.sat.size(); ++i)
    {
      s << indent << "  sat[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.sat[i]);
    }
    s << indent << "cn0[]" << std::endl;
    for (size_t i = 0; i < v.cn0.size(); ++i)
    {
      s << indent << "  cn0[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cn0[i]);
    }
    s << indent << "system_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_error);
    s << indent << "io_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.io_error);
    s << indent << "swift_nap_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swift_nap_error);
    s << indent << "external_antenna_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_antenna_present);
    s << indent << "num_gps_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_gps_sat);
    s << indent << "cn0_gps[]" << std::endl;
    for (size_t i = 0; i < v.cn0_gps.size(); ++i)
    {
      s << indent << "  cn0_gps[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cn0_gps[i]);
    }
    s << indent << "num_sbas_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sbas_sat);
    s << indent << "cn0_sbas[]" << std::endl;
    for (size_t i = 0; i < v.cn0_sbas.size(); ++i)
    {
      s << indent << "  cn0_sbas[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cn0_sbas[i]);
    }
    s << indent << "num_glonass_sat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_glonass_sat);
    s << indent << "cn0_glonass[]" << std::endl;
    for (size_t i = 0; i < v.cn0_glonass.size(); ++i)
    {
      s << indent << "  cn0_glonass[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cn0_glonass[i]);
    }
    s << indent << "fix_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fix_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIKSI_RTK_MSGS_MESSAGE_RECEIVERSTATE_V2_2_15_H
