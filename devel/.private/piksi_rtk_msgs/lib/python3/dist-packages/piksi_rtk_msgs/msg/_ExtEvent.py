# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piksi_rtk_msgs/ExtEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class ExtEvent(genpy.Message):
  _md5sum = "7e621795083c9af53b654fd825b99ec0"
  _type = "piksi_rtk_msgs/ExtEvent"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Reports detection of an external event, the GPS time it occurred, which pin it
# was and whether it was rising or falling.

# Modified to contain ROS time.

std_msgs/Time stamp
bool pin_value
bool quality
uint8 pin

uint8 PIN_VALUE_LOW   = 0   # Falling edge.
uint8 PIN_VALUE_HIGH  = 1   # Rising edge
uint8 QUALITY_UNKNOWN = 0   # No NAV solution.
uint8 QUALITY_GOOD    = 1   # 1 Microsecond accuracy.

================================================================================
MSG: std_msgs/Time
time data
"""
  # Pseudo-constants
  PIN_VALUE_LOW = 0
  PIN_VALUE_HIGH = 1
  QUALITY_UNKNOWN = 0
  QUALITY_GOOD = 1

  __slots__ = ['stamp','pin_value','quality','pin']
  _slot_types = ['std_msgs/Time','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,pin_value,quality,pin

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      if self.pin_value is None:
        self.pin_value = False
      if self.quality is None:
        self.quality = False
      if self.pin is None:
        self.pin = 0
    else:
      self.stamp = std_msgs.msg.Time()
      self.pin_value = False
      self.quality = False
      self.pin = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I3B().pack(_x.stamp.data.secs, _x.stamp.data.nsecs, _x.pin_value, _x.quality, _x.pin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.stamp.data.secs, _x.stamp.data.nsecs, _x.pin_value, _x.quality, _x.pin,) = _get_struct_2I3B().unpack(str[start:end])
      self.pin_value = bool(self.pin_value)
      self.quality = bool(self.quality)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I3B().pack(_x.stamp.data.secs, _x.stamp.data.nsecs, _x.pin_value, _x.quality, _x.pin))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.stamp.data.secs, _x.stamp.data.nsecs, _x.pin_value, _x.quality, _x.pin,) = _get_struct_2I3B().unpack(str[start:end])
      self.pin_value = bool(self.pin_value)
      self.quality = bool(self.quality)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I3B = None
def _get_struct_2I3B():
    global _struct_2I3B
    if _struct_2I3B is None:
        _struct_2I3B = struct.Struct("<2I3B")
    return _struct_2I3B
